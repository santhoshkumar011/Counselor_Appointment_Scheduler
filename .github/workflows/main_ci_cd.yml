name: Azure CI/CD - Terraform to AKS

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write        # Required for azure/login
  contents: read         # Required for actions/checkout
  actions: read
  security-events: write # <-- ADDED: Required for CodeQL to upload results

env:
  TF_WORKING_DIR: 'terraform'
  ACR_NAME_OUTPUT: 'acr_login_server'
  AKS_NAME_OUTPUT: 'aks_cluster_name'
  RG_NAME_OUTPUT: 'resource_group_name'
  BACKEND_IMAGE_NAME: 'counselor-backend'
  BACKEND_APP_PATH: 'backend'
  K8S_MANIFESTS_PATH: 'k8s'
  PROJECT_PREFIX: 'counselorapp'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # --- START: NEW STEPS FOR PRIORITY #1 (CODEQL) ---
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          # IMPORTANT: Change 'java' if your backend is not Java
          # (e.g., javascript, python, go, csharp)
          languages: java

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
      # --- END: NEW STEPS FOR PRIORITY #1 ---

      - name: Azure Login (service principal)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Provision Azure Infrastructure
        id: tf_apply
        run: |
          terraform init -backend=false
          terraform apply -auto-approve
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Extract Terraform Outputs
        id: tf_output
        run: |
          echo "ACR_LOGIN_SERVER=$(terraform output -raw ${{ env.ACR_NAME_OUTPUT }})" >> $GITHUB_ENV
          echo "RESOURCE_GROUP=$(terraform output -raw ${{ env.RG_NAME_OUTPUT }})" >> $GITHUB_ENV
          echo "AKS_CLUSTER=$(terraform output -raw ${{ env.AKS_NAME_OUTPUT }})" >> $GITHUB_ENV
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Docker Login to ACR
        run: |
          az acr login --name ${{ env.ACR_LOGIN_SERVER }}

      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG=${{ env.ACR_LOGIN_SERVER }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }}
          echo "Building image: $IMAGE_TAG"
          docker build -t $IMAGE_TAG ${{ env.BACKEND_APP_PATH }}
          docker push $IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Set AKS Context
        uses: azure/aks-set-context@v3
        with:
          cluster-name: ${{ env.AKS_CLUSTER }}
          resource-group: ${{ env.RESOURCE_GROUP }}

      - name: Deploy to AKS
        uses: azure/k8s-deploy@v5
        with:
          manifests: |
            ${{ env.K8S_MANIFESTS_PATH }}/deployment.yaml
            ${{ env.K8S_MANIFESTS_PATH }}/service.yaml
          images: |
            ${{ env.IMAGE_TAG }}
          namespace: default